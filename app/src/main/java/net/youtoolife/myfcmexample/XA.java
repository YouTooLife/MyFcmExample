package net.youtoolife.myfcmexample;

import android.util.Base64;

import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

/**
 * Created by youtoolife on 5/19/18.
 */

public class XA {


    //--------LOGIN URL-------//
    public static final byte[] A = {7,
            79,30,-6,81,124,-63,-13,-57,71,115,56,-59,98,1,6,
            112,64,-88,97,-77,79,2,57,-80,-37,-28,-64,-41,-82,-36,
            66,-20,-23,-70,-125,-9,-14,98,120,-25,85,-122,14,-62,48,
            84,89};

    public static final byte[] AA = {7,
            79,30,-6,81,124,-63,-13,-57,71,115,56,-59,98,1,6,
            -118,3,30,67,102,-26,67,-73,111,72,-82,-49,113,27,-123,
            -57,-26,-123,-120,61,-70,-26,-110,44,108,100,-78,-24,48,115,
            96,-105};

    //--------USER ACCESS PWD-------//
    public static final byte[] B = {-35,
            58,64,-57,37,-112,-86,97,55,85,-8,107,-100,71,108,110,
            100,32,65,-73,64,5,-86,89,-97,41,77,-5,58,121,-50,
            -74,114,92,42,-81,8,122,114,-54,-127,23,-83,-112,-92,-64,
            56,101};

    //--------IMG URL-------//
    public static final byte[] C = {7,
            79,30,-6,81,124,-63,-13,-57,71,115,56,-59,98,1,6,
            -51,-5,-121,-9,91,-117,72,38,-25,68,-110,-86,-103,-128,32,
            -12,104,59,117,-16,41,115,-60,-90,91,-7,-41,-122,76,56,
            -26,50};

    //------RSA Module----//
    public static final byte[] MA = {-120,
            97,-66,106,5,-73,-107,52,-103,-61,-20,60,53,-47,35,-7,
            89,-7,12,51,-57,-45,58,57,2,62,107,30,107,-114,4,
            13,52,-19,-91,14,-54,-109,16,-108,54,74,86,-110,103,34,
            -5,92,2,-15,112,-23,-98,82,-45,-22,-107,-61,18,73,-90,
            37,3,44,-69,16,15,-112,87,126,-85,-9,74,98,-109,-90,
            94,-121,-91,-79,20,73,-21,58,86,-101,-39,21,33,-96,48,
            -86,-31,109,101,23,-110,-69,-2,18,-61,-29,-104,43,-80,25,
            62,-86,-114,88,-122,125,82,105,29,91,-107,50,16,-39,-22,
            31,-61,-32,107,17,-92,115,-123,-6,-4,-125,-5,28,76,66,
            -7,94,-21,68,111,64,15,62,35,-17,80,-67,-62,-103,-107,
            -102,-97,-15,98,-68,118,94,-10,-30,-3,1,-10,65,94,73,
            112,120,-80,-3,13,106,42,6,112,-53,-50,126,-96,-66,-41,
            63,-48,79,-51,-26,17,-84,-108,107,-83,-121,87,101,126,-113,
            -126,-75,116,-112,-6,-104,84,-84,-69,119,-9,-101,-57,28,-78,
            -128,-36,-63,-111,57,-71,17,-87,-2,111,20,88,-96,89,-119,
            20,92,-41,30,-8,-126,-49,-89,60,72,-20,68,-59,-55,45,
            74,13,76,2,-30,-97,37,44,-52,80,-59,-27,9,60,44,
            95,-85,-100,31,-95,-50,-105,81,-74,-84,-19,67,-12,-71,-125,
            127,-96,-119,76,7,22,102,-73,-20,118,74,109,117,-55,92,
            14,17,72,-26,108,-102,5,79,-119,-13,20,-124,86,-128,-124,
            -53,-8,-45,35,82,112,72,-32,81,-51,-115,-35,79,7,18,
            38,-89,-87,1,-106,-78,-20,-44,-44,-108,-127,-67,-72,0,-26,
            -44,-77,12,-74,-121,105,118,62,13,106,7,122,11,36,-15,
            31,41,-80,-30,72,-12,43,-1,-53,-46,-18,56,104,74,-124,
            -3,62,60,-58,-30,42,-28,113,22,25,-51,-72,-37,97,35,
            87,-1,12,-58,-73,-10,4,56,113,-125,63,8,56,124,27,
            59,-23,10,124,-64,-4,-115,-47,-24,75,-24,-42,3,67,-79,
            -28,108,91,11,-39,10,62,10,-112,46,-40,122,-44,-115,24,
            36,-65,125,-6,-82,-113,38,-78,53,-18,-80,91,75,-78,72,
            30,-35,29,38,66,-35,105,66,59,-66,3,90,-20,112,113,
            87,61,-125,-7,70,-103,-25,-21,6,6,119,87,-15,-86,-5,
            13,113,54,-8,-37,126,110,-59,124,86,105,-98,-17,25,-84,
            60,-53,13,-84,119,-79,100,83,-76,100,72,-35,104,7,32,
            96,16,57,-117,-22,8,53,-106,54,-85,11,-68,-14,-95,-82,
            -21,-77,-13,123,-17,-121,-118,110,53,90,-35,47,72,-84,-27,
            56,117,22,35,-100,-24,82,51,-5,29,82,81,83,-13,40,
            -48,-128,-45,-63,126,-61,-65,-37,26,123,47,62,-86,18,76,
            -40,-65,-100,-16,54,-69,58,41,40,58,-117,47,-42,98,-121,
            50,-15,51,56,-36,36,-53,44,-64,102,75,112,95,-57,-77,
            105,109,55,104,-39,-66,27,-104,102,48,-26,15,50,64,-106,
            49,-69,-4,71,92,96,108,63,7,27,7,27,-108,-23,106,
            55,76,-47,-21,14,79,123,-15,-54,-110,-88,83,-98,98,-37,
            68,28,-86,-17,119,117,127,12,-104,32,127,-15,75,-123,22,
            -21,35,77,47,-41,-5,43,101,-1,100,-61,-96,-90,-7,-5,
            -74,-68,-25,-55,4,-15,76,-79,-96,16,122,-51,-58,-9,-28,
            -92,33,-85,38,71,-127,-27,-67,-55,70,34,-112,-122,24,122,
            84,6,-77,7,-122,108,115,99,83,41,119,103,98,-116,107,
            83,-95,7,-3,90,8,-119,-24,-40,-86,-81,113,-59,35,-44,
            -90,18,106,97,-22,-33,102,-58,19,91,-33,-18,79,55,43,
            -122,46,-85,-114,14,35,-121,-52,-107,-48,-54,39,60,16,117,
            -22,-86,-50,117,59,120,-107,11,-30,106,-87,72,-75,-67,-42,
            -72,-75,112,-32,-37,-40,12,-12,-51,-116,-95,-102,-124,-103,-55,
            6,37,18};

    //---RSA Exp-----//
    public static final byte[] EA = {25,
            42,76,74,79,101,-4,20,73,65,54,50,93,-10,-14,42,
            26,-1,-84,59,56,111,95,-20,-33,-30,78,62,23,-33,12,
            14,-89,27,-23,-55,59,-94,-61,-126,-13,88,50,15,103,-2,
            23,85,62,-101,57,26,93,97,55,-81,39,-57,-105,65,-17,
            -2,-3,121,-45,-52,-120,3,28,109,-121,34,35,45,-62,87,
            -59,15,109,100,23,107,-86,-77,-119,-92,-6,127,-22,-95,-122,
            -23,-1,-82,-66,-68,-68,-61,40,-128,4,-36,-47,31,-89,-58,
            60,-15,-19,-31,-97,-20,-111,27,-62,-12,40,72,-120,-1,73,
            44,55,-97,-52,2,90,55,38,-33,63,62,38,72,27,-119,
            86,-57,-62,89,115,50,-65,-52,-46,-36,-20,32,118,-21,-58,
            119,-73,-122,85,-60,-11,-128,-5,105,-121,-68,-32,118,6,50,
            52,3,-8,-102,67,-53,81,-34,59,85,-64,81,28,-31,-64,
            -50,64,7,70,-75,3,5,-71,103,-92,-85,22,95,-39,-76,
            88,28,-87,0,24,-40,127,-27,-52,82,111,-118,69,14,67,
            -24,-114,-107,37,-103,-108,49,-42,113,101,-25,-83,-120,66,-102,
            32,-55,81,-116,97,-53,103,45,87,0,30,-31,34,118,-8,
            -3,-106,-86,79,5,-35,-84,-10,11,-76,-123,43,-18,-111,-95,
            -98,110,60,-71,42,59,63,35,-115,-74,-91,-14,-89,60,58,
            64,102,11,-89,100,19,-40,89,10,-62,-36,56,-66,102,-8,
            21,41,-13,-57,-81,30,-21,-40,45,41,80,-39,-31,-65,92,
            46,83,-50,-123,122,30,-69,37,-102,-88,-68,87,-76,112,6,
            -9,-126,55,-106,-110,-104,36,-113,-93,103,-120,71,48,70,1,
            61,-103,-39,6,-53,-21,125,107,-51,65,-9,71,-87,-52,109,
            100,78,2,-112,47,90,23,-61,31,-7,112,67,-92,75,-85,
            78,122,-42,33,-121,-72,74,-74,-29,-56,57,-106,-128,-49,-43,
            37,126,94,-102,-53,-76,-47,8,53,-126,-12,-67,123,87,-25,
            37,-38,39,106,41,12,20,-121,-3,102,127,-76,108,30,-71,
            11,69,100,7,-2,105,99,93,-117,2,79,-93,25,-40,-108,
            -13,-124,35,62,103,-113,111,-102,-81,4,-60,-124,0,34,-48,
            118,-79,-2,105,34,-12,-114,34,-125,35,86,-23,-74,101,-86,
            104,-26,98,-61,110,-18,-108,-36,52,-106,-74,-74,-96,-125,42,
            -15,85,-16,43,100,-43,118,68,-15,-68,-15,89,-120,-3,32,
            -119,-47,-119,-4,35,-127,-94,48,109,113,87,-13,-105,46,88,
            116,-51,-8,103,24,-11,-98,14,-104,61,-22,-85,-84,103,24,
            -63,-101,58,-11,20,21,-111,-17,-45,97,85,87,98,7,105,
            -92,33,9,-75,-28,-124,22,-121,-10,-39,18,20,-81,88,0,
            9,-47,-24,-47,-107,51,-81,-52,-82,124,1,119,-36,84,-38,
            -61,28,-18,26,95,-110,-118,48,101,26,-78,-5,-86,-40,-84,
            39,74,72,-106,51,-87,-48,125,16,59,-70,-26,-127,-113,111,
            -46,4,-97,-57,-56,-43,-126,-36,-98,123,-115,67,-68,-126,-31,
            -93,67,-51,103,-11,28,34,-31,-3,-106,-80,29,-74,-127,-3,
            30,123,38,54,42,-118,104,-112,57,72,-9,-90,-83,60,29,
            -42,93,-33,-75,-91,37,-88,-36,-41,-17,23,11,30,106,-77,
            -93,-53,117,-57,34,-63,14,70,-119,73,-100,-125,104,127,73,
            52,-46,33,121,-91,-27,120,123,25,-46,-121,-74,48,-51,84,
            110,-21,101,43,90,-123,-48,116,12,-44,-97,5,-99,52,121,
            -106,-3,-25,2,-113,-51,54,-69,-21,-19,110,41,90,-39,32,
            -105,-101,-111,57,2,83,64,75,-75,-91,-81,-111,-28,66,126,
            54,-19,-65,-40,-100,-62,55,-88,-74,27,-82,-42,-18,-4,-60,
            -110,-89,-83,-19,74,20,-34,103,115,115,-102,-36,-47,-31,-97,
            86,-2,74,-71,102,-8,27,47,-25,-16,80,2,123,-25,46,
            82,-100,68,-117,-58,12,26,105,-25,77,107,-120,-98,-118,-119,
            -33,62,-99};


    public static String b(byte[] eb) {
        String b = null;
        try {
            byte[] salt = "saltysalt".getBytes();
            char[] password = "peanuts".toCharArray();
            char[] iv = new char[16];
            Arrays.fill(iv, ' ');
            int keyLength = 16;
            int iterations = 1003;
            PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, keyLength * 8);
            SecretKeyFactory pbkdf2 = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            byte[] aesKey = pbkdf2.generateSecret(spec).getEncoded();
            SecretKeySpec keySpec = new SecretKeySpec(aesKey, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            byte[] encryptedBytes = eb;//.getBytes("UTF-8");
            if (new String(encryptedBytes).startsWith("v10")) {
                encryptedBytes = Arrays.copyOfRange(encryptedBytes, 3, encryptedBytes.length);
            }
            cipher.init(Cipher.DECRYPT_MODE, keySpec, new IvParameterSpec(new String(iv).getBytes()));
            byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
            b = new String(decryptedBytes, "UTF-8");
        }catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return b;
    }

    public static String a(String t) {
        String a = null;
        try {
            byte[] salt = "saltysalt".getBytes();
            char[] password = "peanuts".toCharArray();
            char[] iv = new char[16];
            Arrays.fill(iv, ' ');
            int keyLength = 16;
            int iterations = 1003;
            PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, keyLength * 8);
            SecretKeyFactory pbkdf2 = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            byte[] aesKey = pbkdf2.generateSecret(spec).getEncoded();
            SecretKeySpec keySpec = new SecretKeySpec(aesKey, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, keySpec, new IvParameterSpec(new String(iv).getBytes()));
            byte[] encryptBytes0 = cipher.doFinal(t.getBytes("UTF-8"));
            //System.out.println(new String(encryptBytes0));
            a = Base64.encodeToString(encryptBytes0, Base64.DEFAULT);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return a;
    }

}
